{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DTE-S2GOS Controller","text":"<p>The Python control layer for the ESA DTE-S2GOS synthetic scene generator service.</p> <p>Note, this project and its documentation is still in an early development stage.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>Note, should the following diagram code not render, copy it  into the mermaid editor.</p>"},{"location":"architecture/#overview","title":"Overview","text":"<pre><code>---\nconfig:\n    class:\n        hideEmptyMembersBox: true\n    theme: default\n---\nclassDiagram\ndirection TB\n    namespace s2gos_client {\n        class api.AsyncClient\n        class api.Client\n        class gui.Client\n        class cli\n    }\n    namespace s2gos_common {\n        class models\n        class service.Service\n    }\n    namespace s2gos_server {\n        class server\n        class routes\n        class services.local.LocalService\n    }\n\n    cli ..&gt; api.Client : use\n    gui.Client ..|&gt; api.Client : inherits\n    api.Client ..&gt; service.Service : uses\n    api.AsyncClient ..&gt; service.Service : uses\n    service.Service ..&gt; models : uses\n    services.local.LocalService --|&gt; service.Service : implements\n    routes ..&gt; service.Service : uses\n    server ..&gt; routes : uses\n    server ..&gt; services.local.LocalService : configured to use\n\n    note for gui.Client \"will later inherit from AsyncClient\"\n</code></pre>"},{"location":"architecture/#s2gos-client-gui","title":"S2GOS Client - GUI","text":"<p>Given here is the design used in package <code>s2gos_client.gui.component</code>. The package contains the code to generate widgets and panels from the  JSON schema <code>s2gos_common.models.InputDescription</code> instances contained in a <code>s2gos_common.models.ProcessDescription</code> instance.</p> <p>The <code>ComponentContainer</code> maps every <code>InputDescription</code> to a visual  <code>Component</code> that is created for a given JSON schema.  </p> <pre><code>---\nconfig:\n  class:\n    hideEmptyMembersBox: true\n  layout: elk\n---\nclassDiagram\ndirection LR\n    class models.InputDescription {\n      title\n      description\n      schema\n    }\n    class ComponentContainer {\n        \\_\\_init\\_\\_(input_descriptions)\n      get_components()\n      get_viewables()\n    }\n    ComponentContainer ..&gt; ComponentFactoryRegistry : use\n    ComponentContainer o--&gt; models.InputDescription : 1..n by name\n    ComponentContainer o--&gt; Component : 1..n\n    ComponentFactory ..&gt; Component : create\n    ComponentFactoryRegistry *--&gt; ComponentFactory\n</code></pre> <p>A suitable <code>ComponentFactory</code> is selected for a given JSON schema and will create the <code>Component</code> when it is needed. The possible <code>ComponentFactory</code> instances are registered in a  <code>ComponentFactoryRegistry</code> singleton.</p> <pre><code>---\nconfig:\n  class:\n    hideEmptyMembersBox: true\n  layout: dagre\n---\nclassDiagram\ndirection TB\n    class panel.viewable.Viewable {\n        \\_\\_panel\\_\\_()\n    }\n    class Component {\n        viewable\n        json_codec\n        _get_value_()\n        _set_value_(val)\n        _watch_value_(cb)\n    }\n    class WidgetComponent {\n    }\n    class ComponentFactory {\n        _accept_(schema)\n        _create_component_(schema)\n    }\n    class ComponentFactoryRegistry {\n      register_factory(factory, type, format)\n      find_factory(schema)\n    }\n    class ComponentFactoryBase {\n        type\n        format\n        accept(schema)\n    }\n    class BooleanCF {\n    }\n    class IntegerCF {\n    }\n    class NumberCF {\n    }\n    class StringCF {\n    }\n    class DateCF {\n    }\n    class BboxCF {\n    }\n    Component &lt;|-- WidgetComponent\n    Component --&gt; panel.viewable.Viewable : 1 \n    ComponentFactory ..&gt; Component : create\n    ComponentFactoryRegistry *--&gt; ComponentFactory : 0..N\n    ComponentFactory &lt;|-- ComponentFactoryBase\n    ComponentFactoryBase &lt;|-- BooleanCF\n    ComponentFactoryBase &lt;|-- IntegerCF\n    ComponentFactoryBase &lt;|-- NumberCF\n    ComponentFactoryBase &lt;|-- StringCF\n    ComponentFactoryBase &lt;|-- DateCF\n    ComponentFactoryBase &lt;|-- BboxCF\n</code></pre>"},{"location":"architecture/#s2gos-common","title":"S2GOS Common","text":"<p>Given here is the design used in package <code>s2gos_common.service</code>.</p> <pre><code>classDiagram\ndirection TB\n    class Service {\n        get_conformance()\n        get_capabilities()\n        get_processes()\n        get_process(process_id)\n        execute_process(process_id, process_request)\n        get_jobs()\n        get_job(job_id)\n        get_job_result(job_id)\n    }\n    class ProcessList {\n    }\n    class ProcessSummary {\n        process_id\n    }\n    class ProcessDescription {\n    }\n    class ProcessRequest {\n        inputs\n        outputs\n        response\n        subscriber\n    }\n    class JobList {\n    }\n    class JobInfo {\n        process_id\n        job_id\n        status\n        progress\n    }\n    class JobResult {\n    }\n    class InputDescription {\n        schema\n    }\n    class Description {\n        title\n        description\n    }\n    ProcessList *--&gt; ProcessSummary : 0 .. N \n    ProcessSummary --|&gt; Description\n    ProcessDescription --|&gt; ProcessSummary\n    ProcessDescription *--&gt; InputDescription : 0 .. N by name\n    ProcessDescription *--&gt; OutputDescription : 0 .. N by name\n    InputDescription --|&gt; Description\n    OutputDescription --|&gt; Description\n    JobList *--&gt; JobInfo : 0 .. N \n    Service ..&gt; ProcessList : obtain\n    Service ..&gt; ProcessDescription : obtain\n    Service ..&gt; JobList : obtain\n    Service ..&gt; JobInfo : obtain\n    Service ..&gt; JobResult : obtain   \n    Service ..&gt; ProcessRequest : use      \n</code></pre>"},{"location":"architecture/#code-generation","title":"Code generation","text":"<pre><code>---\nconfig:\n  theme: default\n---\nflowchart LR\n    openapi@{ shape: lean-r, label: \"OpenAPI.yaml\" }\n    sync_client@{ shape: stadium, label: \"s2gos_client.api.Client\" }\n    async_client@{ shape: stadium, label: \"s2gos_client.api.AsyncClient\" }\n    models@{ shape: stadium, label: \"s2gos_common.models.*\" }\n    service@{ shape: stadium, label: \"s2gos_common.service.Service\" }\n    routes@{ shape: stadium, label: \"s2gos_server.routes\" }\n    openapi --&gt; generate\n    generate --&gt; gen-client\n    generate --&gt; gen-common\n    generate --&gt; gen-server\n    gen-client --&gt; sync_client\n    gen-client --&gt; async_client\n    gen-common --&gt; models\n    gen-common --&gt; service\n    gen-server --&gt; routes\n</code></pre> <p>Generating Airflow DAGs:</p> <pre><code>---\nconfig:\n  theme: default\n---\nflowchart LR\n    local_service@{ shape: stadium, label: \"s2gos_server.services.local.testing:service\" }\n    dags@{ shape: stadium, label: \"s2gos_airflow/dags\" }\n    local_service --&gt; gen-dags\n    gen-dags --&gt; dags\n</code></pre>"},{"location":"client-api/","title":"Client API Reference","text":"<p>The <code>Client</code> class provides a synchronous API. If you want an asynchronous version, use the <code>AsyncClient</code> class instead. It provides the same interface, but using asynchronous server calls.</p> <p>Both clients return their configuration as a  <code>ClientConfig</code> object.</p> <p>Methods of the <code>Client</code> and <code>AsyncClient</code>  may raise a <code>ClientError</code> if a server call fails. </p>"},{"location":"client-api/#s2gos_client.Client","title":"<code>s2gos_client.Client</code>","text":"<p>The client API for the web service (synchronous mode).</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>Optional[str]</code> <p>Optional path of the configuration file to be loaded</p> <code>None</code> <code>server_url</code> <code>Optional[str]</code> <p>Optional server URL</p> <code>None</code> <code>user_name</code> <code>Optional[str]</code> <p>Optional username</p> <code>None</code> <code>user_name</code> <code>Optional[str]</code> <p>Optional user access token</p> <code>None</code> <code>debug</code> <code>bool</code> <p>Whether to output debug logs</p> <code>False</code> <code>_transport</code> <code>Optional[Transport]</code> <p>Optional web API transport (for testing only).</p> <code>None</code> Source code in <code>s2gos-client\\src\\s2gos_client\\api\\client.py</code> <pre><code>class Client:\n    \"\"\"\n    The client API for the web service (synchronous mode).\n\n    Args:\n      config_path: Optional path of the configuration file to be loaded\n      server_url: Optional server URL\n      user_name: Optional username\n      user_name: Optional user access token\n      debug: Whether to output debug logs\n      _transport: Optional web API transport (for testing only).\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        config: Optional[ClientConfig] = None,\n        config_path: Optional[str] = None,\n        server_url: Optional[str] = None,\n        user_name: Optional[str] = None,\n        access_token: Optional[str] = None,\n        debug: bool = False,\n        _transport: Optional[Transport] = None,\n    ):\n        if config is None:\n            default_config = ClientConfig.read(config_path=config_path)\n            server_url = server_url or default_config.server_url\n            config = ClientConfig(\n                user_name=user_name or default_config.user_name,\n                access_token=access_token or default_config.access_token,\n                server_url=server_url or DEFAULT_SERVER_URL,\n            )\n        self._config = config\n        self._transport = (\n            HttpxTransport(\n                server_url=config.server_url or DEFAULT_SERVER_URL, debug=debug\n            )\n            if _transport is None\n            else _transport\n        )\n\n    @property\n    def config(self) -&gt; ClientConfig:\n        return self._config\n\n    def _repr_json_(self):\n        # noinspection PyProtectedMember\n        return self._config._repr_json_()\n\n    def get_capabilities(self, **kwargs: Any) -&gt; Capabilities:\n        \"\"\"\n        The landing page provides links to the:\n          * The OpenAPI-definition (no fixed path),\n          * The Conformance statements (path /conformance),\n          * The processes metadata (path /processes),\n          * The endpoint for job monitoring (path /jobs).\n\n        For more information, see [Section\n        7.2](https://docs.ogc.org/is/18-062/18-062.html#sc_landing_page).\n\n        Returns:\n          Capabilities: The landing page provides links to the API definition\n            (link relations `service-desc` and `service-doc`),\n            the Conformance declaration (path `/conformance`,\n            link relation `http://www.opengis.net/def/rel/ogc/1.0/conformance`),\n        and to other resources.\n\n        Raises:\n          ClientError: if the call to the web service fails\n            with a status code != `2xx`.\n            - `500`: A server error occurred.\n        \"\"\"\n        return self._transport.call(\n            TransportArgs(\n                path=\"/\",\n                method=\"get\",\n                return_types={\"200\": Capabilities},\n                error_types={\"500\": ApiError},\n                extra_kwargs=kwargs,\n            )\n        )\n\n    def get_conformance(self, **kwargs: Any) -&gt; ConformanceDeclaration:\n        \"\"\"\n        A list of all conformance classes, specified in a standard, that the\n        server conforms to.\n\n        | Conformance class | URI |\n        |-----------|-------|\n        |Core|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core|\n        |OGC Process Description|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/ogc-process-description|\n        |JSON|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/json|\n        |HTML|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/html|\n        |OpenAPI Specification 3.0|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/oas30|\n        |Job list|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/job-list|\n        |Callback|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/callback|\n        |Dismiss|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/dismiss|\n\n        For more information, see [Section\n        7.4](https://docs.ogc.org/is/18-062/18-062.html#sc_conformance_classes).\n\n\n        Returns:\n          ConformanceDeclaration: The URIs of all conformance classes supported\n        by the server.\n            To support \"generic\" clients that want to access multiple\n            OGC API - Processes implementations - and not \"just\" a specific\n            API / server, the server declares the conformance\n            classes it implements and conforms to.\n\n        Raises:\n          ClientError: if the call to the web service fails\n            with a status code != `2xx`.\n            - `500`: A server error occurred.\n        \"\"\"\n        return self._transport.call(\n            TransportArgs(\n                path=\"/conformance\",\n                method=\"get\",\n                return_types={\"200\": ConformanceDeclaration},\n                error_types={\"500\": ApiError},\n                extra_kwargs=kwargs,\n            )\n        )\n\n    def get_processes(self, **kwargs: Any) -&gt; ProcessList:\n        \"\"\"\n        The list of processes contains a summary of each process the OGC API -\n        Processes offers, including the link to a more detailed description of\n        the process.\n\n        For more information, see [Section\n        7.9](https://docs.ogc.org/is/18-062/18-062.html#sc_process_list).\n\n\n        Returns:\n          ProcessList: Information about the available processes\n\n        Raises:\n          ClientError: if the call to the web service fails\n            with a status code != `2xx`.\n        \"\"\"\n        return self._transport.call(\n            TransportArgs(\n                path=\"/processes\",\n                method=\"get\",\n                return_types={\"200\": ProcessList},\n                extra_kwargs=kwargs,\n            )\n        )\n\n    def get_process(self, process_id: str, **kwargs: Any) -&gt; ProcessDescription:\n        \"\"\"\n        The process description contains information about inputs and outputs\n        and a link to the execution-endpoint for the process. The Core does not\n        mandate the use of a specific process description to specify the\n        interface of a process. That said, the Core requirements class makes the\n        following recommendation:\n\n        Implementations SHOULD consider supporting the OGC process description.\n\n        For more information, see [Section 7.10](https://docs.ogc.org/is/18-\n        062/18-062.html#sc_process_description).\n\n        Args:\n          process_id:\n          kwargs: Optional keyword arguments that may be\n            used by the underlying transport.\n\n        Returns:\n          ProcessDescription: A process description.\n\n        Raises:\n          ClientError: if the call to the web service fails\n            with a status code != `2xx`.\n            - `404`: The requested URI was not found.\n        \"\"\"\n        return self._transport.call(\n            TransportArgs(\n                path=\"/processes/{processID}\",\n                method=\"get\",\n                path_params={\"processID\": process_id},\n                return_types={\"200\": ProcessDescription},\n                error_types={\"404\": ApiError},\n                extra_kwargs=kwargs,\n            )\n        )\n\n    def execute_process(\n        self, process_id: str, request: ProcessRequest, **kwargs: Any\n    ) -&gt; JobInfo:\n        \"\"\"\n        Create a new job.\n\n        For more information, see [Section\n        7.11](https://docs.ogc.org/is/18-062/18-062.html#sc_create_job).\n\n        Args:\n          process_id:\n          kwargs: Optional keyword arguments that may be\n            used by the underlying transport.\n          request: Mandatory request JSON\n\n        Returns:\n          JobInfo: Started asynchronous execution. Created job.\n\n        Raises:\n          ClientError: if the call to the web service fails\n            with a status code != `2xx`.\n            - `404`: The requested URI was not found.\n            - `500`: A server error occurred.\n        \"\"\"\n        return self._transport.call(\n            TransportArgs(\n                path=\"/processes/{processID}/execution\",\n                method=\"post\",\n                path_params={\"processID\": process_id},\n                request=request,\n                return_types={\"201\": JobInfo},\n                error_types={\"404\": ApiError, \"500\": ApiError},\n                extra_kwargs=kwargs,\n            )\n        )\n\n    def get_jobs(self, **kwargs: Any) -&gt; JobList:\n        \"\"\"\n        Lists available jobs.\n\n        For more information, see [Section\n        11](https://docs.ogc.org/is/18-062/18-062.html#sc_job_list).\n\n\n        Returns:\n          JobList: A list of jobs for this process.\n\n        Raises:\n          ClientError: if the call to the web service fails\n            with a status code != `2xx`.\n            - `404`: The requested URI was not found.\n        \"\"\"\n        return self._transport.call(\n            TransportArgs(\n                path=\"/jobs\",\n                method=\"get\",\n                return_types={\"200\": JobList},\n                error_types={\"404\": ApiError},\n                extra_kwargs=kwargs,\n            )\n        )\n\n    def get_job(self, job_id: str, **kwargs: Any) -&gt; JobInfo:\n        \"\"\"\n        Shows the status of a job.\n\n        For more information, see [Section 7.12](https://docs.ogc.org/is/18-\n        062/18-062.html#sc_retrieve_status_info).\n\n        Args:\n          job_id: local identifier of a job\n          kwargs: Optional keyword arguments that may be\n            used by the underlying transport.\n\n        Returns:\n          JobInfo: The status of a job.\n\n        Raises:\n          ClientError: if the call to the web service fails\n            with a status code != `2xx`.\n            - `404`: The requested URI was not found.\n            - `500`: A server error occurred.\n        \"\"\"\n        return self._transport.call(\n            TransportArgs(\n                path=\"/jobs/{jobId}\",\n                method=\"get\",\n                path_params={\"jobId\": job_id},\n                return_types={\"200\": JobInfo},\n                error_types={\"404\": ApiError, \"500\": ApiError},\n                extra_kwargs=kwargs,\n            )\n        )\n\n    def dismiss_job(self, job_id: str, **kwargs: Any) -&gt; JobInfo:\n        \"\"\"\n        Cancel a job execution and remove it from the jobs list.\n\n        For more information, see [Section\n        13](https://docs.ogc.org/is/18-062/18-062.html#Dismiss).\n\n        Args:\n          job_id: local identifier of a job\n          kwargs: Optional keyword arguments that may be\n            used by the underlying transport.\n\n        Returns:\n          JobInfo: Information about the job.\n\n        Raises:\n          ClientError: if the call to the web service fails\n            with a status code != `2xx`.\n            - `404`: The requested URI was not found.\n            - `500`: A server error occurred.\n        \"\"\"\n        return self._transport.call(\n            TransportArgs(\n                path=\"/jobs/{jobId}\",\n                method=\"delete\",\n                path_params={\"jobId\": job_id},\n                return_types={\"200\": JobInfo},\n                error_types={\"404\": ApiError, \"500\": ApiError},\n                extra_kwargs=kwargs,\n            )\n        )\n\n    def get_job_results(self, job_id: str, **kwargs: Any) -&gt; JobResults:\n        \"\"\"\n        Lists available results of a job. In case of a failure, lists errors\n        instead.\n\n        For more information, see [Section 7.13](https://docs.ogc.org/is/18-\n        062/18-062.html#sc_retrieve_job_results).\n\n        Args:\n          job_id: local identifier of a job\n          kwargs: Optional keyword arguments that may be\n            used by the underlying transport.\n\n        Returns:\n          JobResults: The results of a job.\n\n        Raises:\n          ClientError: if the call to the web service fails\n            with a status code != `2xx`.\n            - `404`: The requested URI was not found.\n            - `500`: A server error occurred.\n        \"\"\"\n        return self._transport.call(\n            TransportArgs(\n                path=\"/jobs/{jobId}/results\",\n                method=\"get\",\n                path_params={\"jobId\": job_id},\n                return_types={\"200\": JobResults},\n                error_types={\"404\": ApiError, \"500\": ApiError},\n                extra_kwargs=kwargs,\n            )\n        )\n\n    def close(self):\n        \"\"\"Closes this client.\"\"\"\n        if self._transport is not None:\n            self._transport.close()\n</code></pre>"},{"location":"client-api/#s2gos_client.Client.get_capabilities","title":"<code>get_capabilities(**kwargs)</code>","text":"The landing page provides links to the <ul> <li>The OpenAPI-definition (no fixed path),</li> <li>The Conformance statements (path /conformance),</li> <li>The processes metadata (path /processes),</li> <li>The endpoint for job monitoring (path /jobs).</li> </ul> <p>For more information, see Section 7.2.</p> <p>Returns:</p> Name Type Description <code>Capabilities</code> <code>Capabilities</code> <p>The landing page provides links to the API definition (link relations <code>service-desc</code> and <code>service-doc</code>), the Conformance declaration (path <code>/conformance</code>, link relation <code>http://www.opengis.net/def/rel/ogc/1.0/conformance</code>),</p> <p>and to other resources.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>if the call to the web service fails with a status code != <code>2xx</code>. - <code>500</code>: A server error occurred.</p> Source code in <code>s2gos-client\\src\\s2gos_client\\api\\client.py</code> <pre><code>def get_capabilities(self, **kwargs: Any) -&gt; Capabilities:\n    \"\"\"\n    The landing page provides links to the:\n      * The OpenAPI-definition (no fixed path),\n      * The Conformance statements (path /conformance),\n      * The processes metadata (path /processes),\n      * The endpoint for job monitoring (path /jobs).\n\n    For more information, see [Section\n    7.2](https://docs.ogc.org/is/18-062/18-062.html#sc_landing_page).\n\n    Returns:\n      Capabilities: The landing page provides links to the API definition\n        (link relations `service-desc` and `service-doc`),\n        the Conformance declaration (path `/conformance`,\n        link relation `http://www.opengis.net/def/rel/ogc/1.0/conformance`),\n    and to other resources.\n\n    Raises:\n      ClientError: if the call to the web service fails\n        with a status code != `2xx`.\n        - `500`: A server error occurred.\n    \"\"\"\n    return self._transport.call(\n        TransportArgs(\n            path=\"/\",\n            method=\"get\",\n            return_types={\"200\": Capabilities},\n            error_types={\"500\": ApiError},\n            extra_kwargs=kwargs,\n        )\n    )\n</code></pre>"},{"location":"client-api/#s2gos_client.Client.get_conformance","title":"<code>get_conformance(**kwargs)</code>","text":"<p>A list of all conformance classes, specified in a standard, that the server conforms to.</p> Conformance class URI Core http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core OGC Process Description http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/ogc-process-description JSON http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/json HTML http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/html OpenAPI Specification 3.0 http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/oas30 Job list http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/job-list Callback http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/callback Dismiss http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/dismiss <p>For more information, see Section 7.4.</p> <p>Returns:</p> Name Type Description <code>ConformanceDeclaration</code> <code>ConformanceDeclaration</code> <p>The URIs of all conformance classes supported</p> <p>by the server.     To support \"generic\" clients that want to access multiple     OGC API - Processes implementations - and not \"just\" a specific     API / server, the server declares the conformance     classes it implements and conforms to.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>if the call to the web service fails with a status code != <code>2xx</code>. - <code>500</code>: A server error occurred.</p> Source code in <code>s2gos-client\\src\\s2gos_client\\api\\client.py</code> <pre><code>def get_conformance(self, **kwargs: Any) -&gt; ConformanceDeclaration:\n    \"\"\"\n    A list of all conformance classes, specified in a standard, that the\n    server conforms to.\n\n    | Conformance class | URI |\n    |-----------|-------|\n    |Core|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core|\n    |OGC Process Description|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/ogc-process-description|\n    |JSON|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/json|\n    |HTML|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/html|\n    |OpenAPI Specification 3.0|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/oas30|\n    |Job list|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/job-list|\n    |Callback|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/callback|\n    |Dismiss|http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/dismiss|\n\n    For more information, see [Section\n    7.4](https://docs.ogc.org/is/18-062/18-062.html#sc_conformance_classes).\n\n\n    Returns:\n      ConformanceDeclaration: The URIs of all conformance classes supported\n    by the server.\n        To support \"generic\" clients that want to access multiple\n        OGC API - Processes implementations - and not \"just\" a specific\n        API / server, the server declares the conformance\n        classes it implements and conforms to.\n\n    Raises:\n      ClientError: if the call to the web service fails\n        with a status code != `2xx`.\n        - `500`: A server error occurred.\n    \"\"\"\n    return self._transport.call(\n        TransportArgs(\n            path=\"/conformance\",\n            method=\"get\",\n            return_types={\"200\": ConformanceDeclaration},\n            error_types={\"500\": ApiError},\n            extra_kwargs=kwargs,\n        )\n    )\n</code></pre>"},{"location":"client-api/#s2gos_client.Client.get_processes","title":"<code>get_processes(**kwargs)</code>","text":"<p>The list of processes contains a summary of each process the OGC API - Processes offers, including the link to a more detailed description of the process.</p> <p>For more information, see Section 7.9.</p> <p>Returns:</p> Name Type Description <code>ProcessList</code> <code>ProcessList</code> <p>Information about the available processes</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>if the call to the web service fails with a status code != <code>2xx</code>.</p> Source code in <code>s2gos-client\\src\\s2gos_client\\api\\client.py</code> <pre><code>def get_processes(self, **kwargs: Any) -&gt; ProcessList:\n    \"\"\"\n    The list of processes contains a summary of each process the OGC API -\n    Processes offers, including the link to a more detailed description of\n    the process.\n\n    For more information, see [Section\n    7.9](https://docs.ogc.org/is/18-062/18-062.html#sc_process_list).\n\n\n    Returns:\n      ProcessList: Information about the available processes\n\n    Raises:\n      ClientError: if the call to the web service fails\n        with a status code != `2xx`.\n    \"\"\"\n    return self._transport.call(\n        TransportArgs(\n            path=\"/processes\",\n            method=\"get\",\n            return_types={\"200\": ProcessList},\n            extra_kwargs=kwargs,\n        )\n    )\n</code></pre>"},{"location":"client-api/#s2gos_client.Client.get_process","title":"<code>get_process(process_id, **kwargs)</code>","text":"<p>The process description contains information about inputs and outputs and a link to the execution-endpoint for the process. The Core does not mandate the use of a specific process description to specify the interface of a process. That said, the Core requirements class makes the following recommendation:</p> <p>Implementations SHOULD consider supporting the OGC process description.</p> <p>For more information, see Section 7.10.</p> <p>Parameters:</p> Name Type Description Default <code>process_id</code> <code>str</code> required <code>kwargs</code> <code>Any</code> <p>Optional keyword arguments that may be used by the underlying transport.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>ProcessDescription</code> <code>ProcessDescription</code> <p>A process description.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>if the call to the web service fails with a status code != <code>2xx</code>. - <code>404</code>: The requested URI was not found.</p> Source code in <code>s2gos-client\\src\\s2gos_client\\api\\client.py</code> <pre><code>def get_process(self, process_id: str, **kwargs: Any) -&gt; ProcessDescription:\n    \"\"\"\n    The process description contains information about inputs and outputs\n    and a link to the execution-endpoint for the process. The Core does not\n    mandate the use of a specific process description to specify the\n    interface of a process. That said, the Core requirements class makes the\n    following recommendation:\n\n    Implementations SHOULD consider supporting the OGC process description.\n\n    For more information, see [Section 7.10](https://docs.ogc.org/is/18-\n    062/18-062.html#sc_process_description).\n\n    Args:\n      process_id:\n      kwargs: Optional keyword arguments that may be\n        used by the underlying transport.\n\n    Returns:\n      ProcessDescription: A process description.\n\n    Raises:\n      ClientError: if the call to the web service fails\n        with a status code != `2xx`.\n        - `404`: The requested URI was not found.\n    \"\"\"\n    return self._transport.call(\n        TransportArgs(\n            path=\"/processes/{processID}\",\n            method=\"get\",\n            path_params={\"processID\": process_id},\n            return_types={\"200\": ProcessDescription},\n            error_types={\"404\": ApiError},\n            extra_kwargs=kwargs,\n        )\n    )\n</code></pre>"},{"location":"client-api/#s2gos_client.Client.execute_process","title":"<code>execute_process(process_id, request, **kwargs)</code>","text":"<p>Create a new job.</p> <p>For more information, see Section 7.11.</p> <p>Parameters:</p> Name Type Description Default <code>process_id</code> <code>str</code> required <code>kwargs</code> <code>Any</code> <p>Optional keyword arguments that may be used by the underlying transport.</p> <code>{}</code> <code>request</code> <code>ProcessRequest</code> <p>Mandatory request JSON</p> required <p>Returns:</p> Name Type Description <code>JobInfo</code> <code>JobInfo</code> <p>Started asynchronous execution. Created job.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>if the call to the web service fails with a status code != <code>2xx</code>. - <code>404</code>: The requested URI was not found. - <code>500</code>: A server error occurred.</p> Source code in <code>s2gos-client\\src\\s2gos_client\\api\\client.py</code> <pre><code>def execute_process(\n    self, process_id: str, request: ProcessRequest, **kwargs: Any\n) -&gt; JobInfo:\n    \"\"\"\n    Create a new job.\n\n    For more information, see [Section\n    7.11](https://docs.ogc.org/is/18-062/18-062.html#sc_create_job).\n\n    Args:\n      process_id:\n      kwargs: Optional keyword arguments that may be\n        used by the underlying transport.\n      request: Mandatory request JSON\n\n    Returns:\n      JobInfo: Started asynchronous execution. Created job.\n\n    Raises:\n      ClientError: if the call to the web service fails\n        with a status code != `2xx`.\n        - `404`: The requested URI was not found.\n        - `500`: A server error occurred.\n    \"\"\"\n    return self._transport.call(\n        TransportArgs(\n            path=\"/processes/{processID}/execution\",\n            method=\"post\",\n            path_params={\"processID\": process_id},\n            request=request,\n            return_types={\"201\": JobInfo},\n            error_types={\"404\": ApiError, \"500\": ApiError},\n            extra_kwargs=kwargs,\n        )\n    )\n</code></pre>"},{"location":"client-api/#s2gos_client.Client.get_jobs","title":"<code>get_jobs(**kwargs)</code>","text":"<p>Lists available jobs.</p> <p>For more information, see Section 11.</p> <p>Returns:</p> Name Type Description <code>JobList</code> <code>JobList</code> <p>A list of jobs for this process.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>if the call to the web service fails with a status code != <code>2xx</code>. - <code>404</code>: The requested URI was not found.</p> Source code in <code>s2gos-client\\src\\s2gos_client\\api\\client.py</code> <pre><code>def get_jobs(self, **kwargs: Any) -&gt; JobList:\n    \"\"\"\n    Lists available jobs.\n\n    For more information, see [Section\n    11](https://docs.ogc.org/is/18-062/18-062.html#sc_job_list).\n\n\n    Returns:\n      JobList: A list of jobs for this process.\n\n    Raises:\n      ClientError: if the call to the web service fails\n        with a status code != `2xx`.\n        - `404`: The requested URI was not found.\n    \"\"\"\n    return self._transport.call(\n        TransportArgs(\n            path=\"/jobs\",\n            method=\"get\",\n            return_types={\"200\": JobList},\n            error_types={\"404\": ApiError},\n            extra_kwargs=kwargs,\n        )\n    )\n</code></pre>"},{"location":"client-api/#s2gos_client.Client.get_job","title":"<code>get_job(job_id, **kwargs)</code>","text":"<p>Shows the status of a job.</p> <p>For more information, see Section 7.12.</p> <p>Parameters:</p> Name Type Description Default <code>job_id</code> <code>str</code> <p>local identifier of a job</p> required <code>kwargs</code> <code>Any</code> <p>Optional keyword arguments that may be used by the underlying transport.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>JobInfo</code> <code>JobInfo</code> <p>The status of a job.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>if the call to the web service fails with a status code != <code>2xx</code>. - <code>404</code>: The requested URI was not found. - <code>500</code>: A server error occurred.</p> Source code in <code>s2gos-client\\src\\s2gos_client\\api\\client.py</code> <pre><code>def get_job(self, job_id: str, **kwargs: Any) -&gt; JobInfo:\n    \"\"\"\n    Shows the status of a job.\n\n    For more information, see [Section 7.12](https://docs.ogc.org/is/18-\n    062/18-062.html#sc_retrieve_status_info).\n\n    Args:\n      job_id: local identifier of a job\n      kwargs: Optional keyword arguments that may be\n        used by the underlying transport.\n\n    Returns:\n      JobInfo: The status of a job.\n\n    Raises:\n      ClientError: if the call to the web service fails\n        with a status code != `2xx`.\n        - `404`: The requested URI was not found.\n        - `500`: A server error occurred.\n    \"\"\"\n    return self._transport.call(\n        TransportArgs(\n            path=\"/jobs/{jobId}\",\n            method=\"get\",\n            path_params={\"jobId\": job_id},\n            return_types={\"200\": JobInfo},\n            error_types={\"404\": ApiError, \"500\": ApiError},\n            extra_kwargs=kwargs,\n        )\n    )\n</code></pre>"},{"location":"client-api/#s2gos_client.Client.dismiss_job","title":"<code>dismiss_job(job_id, **kwargs)</code>","text":"<p>Cancel a job execution and remove it from the jobs list.</p> <p>For more information, see Section 13.</p> <p>Parameters:</p> Name Type Description Default <code>job_id</code> <code>str</code> <p>local identifier of a job</p> required <code>kwargs</code> <code>Any</code> <p>Optional keyword arguments that may be used by the underlying transport.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>JobInfo</code> <code>JobInfo</code> <p>Information about the job.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>if the call to the web service fails with a status code != <code>2xx</code>. - <code>404</code>: The requested URI was not found. - <code>500</code>: A server error occurred.</p> Source code in <code>s2gos-client\\src\\s2gos_client\\api\\client.py</code> <pre><code>def dismiss_job(self, job_id: str, **kwargs: Any) -&gt; JobInfo:\n    \"\"\"\n    Cancel a job execution and remove it from the jobs list.\n\n    For more information, see [Section\n    13](https://docs.ogc.org/is/18-062/18-062.html#Dismiss).\n\n    Args:\n      job_id: local identifier of a job\n      kwargs: Optional keyword arguments that may be\n        used by the underlying transport.\n\n    Returns:\n      JobInfo: Information about the job.\n\n    Raises:\n      ClientError: if the call to the web service fails\n        with a status code != `2xx`.\n        - `404`: The requested URI was not found.\n        - `500`: A server error occurred.\n    \"\"\"\n    return self._transport.call(\n        TransportArgs(\n            path=\"/jobs/{jobId}\",\n            method=\"delete\",\n            path_params={\"jobId\": job_id},\n            return_types={\"200\": JobInfo},\n            error_types={\"404\": ApiError, \"500\": ApiError},\n            extra_kwargs=kwargs,\n        )\n    )\n</code></pre>"},{"location":"client-api/#s2gos_client.Client.get_job_results","title":"<code>get_job_results(job_id, **kwargs)</code>","text":"<p>Lists available results of a job. In case of a failure, lists errors instead.</p> <p>For more information, see Section 7.13.</p> <p>Parameters:</p> Name Type Description Default <code>job_id</code> <code>str</code> <p>local identifier of a job</p> required <code>kwargs</code> <code>Any</code> <p>Optional keyword arguments that may be used by the underlying transport.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>JobResults</code> <code>JobResults</code> <p>The results of a job.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>if the call to the web service fails with a status code != <code>2xx</code>. - <code>404</code>: The requested URI was not found. - <code>500</code>: A server error occurred.</p> Source code in <code>s2gos-client\\src\\s2gos_client\\api\\client.py</code> <pre><code>def get_job_results(self, job_id: str, **kwargs: Any) -&gt; JobResults:\n    \"\"\"\n    Lists available results of a job. In case of a failure, lists errors\n    instead.\n\n    For more information, see [Section 7.13](https://docs.ogc.org/is/18-\n    062/18-062.html#sc_retrieve_job_results).\n\n    Args:\n      job_id: local identifier of a job\n      kwargs: Optional keyword arguments that may be\n        used by the underlying transport.\n\n    Returns:\n      JobResults: The results of a job.\n\n    Raises:\n      ClientError: if the call to the web service fails\n        with a status code != `2xx`.\n        - `404`: The requested URI was not found.\n        - `500`: A server error occurred.\n    \"\"\"\n    return self._transport.call(\n        TransportArgs(\n            path=\"/jobs/{jobId}/results\",\n            method=\"get\",\n            path_params={\"jobId\": job_id},\n            return_types={\"200\": JobResults},\n            error_types={\"404\": ApiError, \"500\": ApiError},\n            extra_kwargs=kwargs,\n        )\n    )\n</code></pre>"},{"location":"client-api/#s2gos_client.Client.close","title":"<code>close()</code>","text":"<p>Closes this client.</p> Source code in <code>s2gos-client\\src\\s2gos_client\\api\\client.py</code> <pre><code>def close(self):\n    \"\"\"Closes this client.\"\"\"\n    if self._transport is not None:\n        self._transport.close()\n</code></pre>"},{"location":"client-api/#s2gos_client.ClientConfig","title":"<code>s2gos_client.ClientConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Client configuration.</p> <p>Parameters:</p> Name Type Description Default <code>user_name</code> <p>name of the registered S2GOS user</p> required <code>access_token</code> <p>API access token</p> required <code>server_url</code> <p>server API URL</p> required Source code in <code>s2gos-client\\src\\s2gos_client\\api\\config.py</code> <pre><code>class ClientConfig(BaseModel):\n    \"\"\"Client configuration.\n\n    Args:\n        user_name: name of the registered S2GOS user\n        access_token: API access token\n        server_url: server API URL\n    \"\"\"\n\n    user_name: Optional[str] = None\n    access_token: Optional[str] = None\n    server_url: Optional[str] = None\n\n    def _repr_json_(self):\n        return self.model_dump(mode=\"json\", by_alias=True), dict(root=\"Configuration:\")\n\n    @classmethod\n    def read(cls, config_path: Optional[str | Path] = None) -&gt; \"ClientConfig\":\n        config_path = cls.normalize_config_path(config_path)\n\n        default_config_dict = {}\n        for field_name, _field_info in ClientConfig.model_fields.items():\n            env_var_name = \"S2GOS_\" + field_name.upper()\n            if env_var_name in os.environ:\n                default_config_dict[field_name] = os.environ[env_var_name]\n\n        config_dict = {}\n        if not config_path.exists():\n            config_dict = default_config_dict\n        else:\n            with config_path.open(\"rt\") as stream:\n                config_dict = yaml.load(stream, Loader=yaml.SafeLoader)\n                for k, v in default_config_dict.items():\n                    if k not in config_dict:\n                        config_dict[k] = v\n        return ClientConfig.model_validate(config_dict)\n\n    def write(self, config_path: Optional[str | Path] = None) -&gt; Path:\n        config_path = self.normalize_config_path(config_path)\n        config_path.parent.mkdir(exist_ok=True)\n        with config_path.open(\"wt\") as stream:\n            yaml.dump(\n                self.model_dump(mode=\"json\", by_alias=True, exclude_none=True), stream\n            )\n        return config_path\n\n    @classmethod\n    def normalize_config_path(cls, config_path) -&gt; Path:\n        if isinstance(config_path, Path):\n            return config_path\n        if not config_path:\n            return DEFAULT_CONFIG_PATH\n        return Path(config_path)\n</code></pre>"},{"location":"client-api/#s2gos_client.ClientError","title":"<code>s2gos_client.ClientError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised if a web API call failed with a status code that is not 2xx.</p> Source code in <code>s2gos-client\\src\\s2gos_client\\api\\error.py</code> <pre><code>class ClientError(Exception):\n    \"\"\"Raised if a web API call failed with a status code that is not 2xx.\"\"\"\n\n    def __init__(\n        self,\n        message: str,\n        status_code: int,\n        title: Optional[str] = None,\n        detail: Optional[str] = None,\n    ):\n        super().__init__(message)\n        self.status_code = status_code\n        self.title = title\n        self.detail = detail\n</code></pre>"},{"location":"client-cli/","title":"Client CLI Reference","text":"<p><code>s2gos-client</code> is the client shell tool for the S2GOS service.</p> <p>The tool provides commands for managing processing request templates, processing requests, processing jobs, and gets processing results.</p> <p>You can use shorter command name aliases, e.g., use command name <code>vr</code> for <code>validate-request</code>, or <code>lp</code> for <code>list-processes</code>.</p> <p>Usage:</p> <pre><code>$ s2gos-client [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--version</code>: Show version and exit</li> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>configure</code>: Configure the client tool.</li> <li><code>list-processes</code>: List available processes.</li> <li><code>get-process</code>: Get process details.</li> <li><code>validate-request</code>: Validate a processing request.</li> <li><code>execute-process</code>: Execute a process in asynchronous mode.</li> <li><code>list-jobs</code>: List all jobs.</li> <li><code>get-job</code>: Get job details.</li> <li><code>dismiss-job</code>: Cancel a running or delete a finished job.</li> <li><code>get-job-results</code>: Get job results.</li> </ul>"},{"location":"client-cli/#s2gos-client-configure","title":"<code>s2gos-client configure</code>","text":"<p>Configure the client tool.</p> <p>Usage:</p> <pre><code>$ s2gos-client configure [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-u, --user TEXT</code>: Your user name.</li> <li><code>-t, --token TEXT</code>: Your personal access token.</li> <li><code>-s, --server TEXT</code>: The S2GOS service API URL.</li> <li><code>-c, --config PATH</code>: Client configuration file</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"client-cli/#s2gos-client-list-processes","title":"<code>s2gos-client list-processes</code>","text":"<p>List available processes.</p> <p>Usage:</p> <pre><code>$ s2gos-client list-processes [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-c, --config PATH</code>: Client configuration file</li> <li><code>-f, --format [simple|json|yaml]</code>: Output format  [default: yaml]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"client-cli/#s2gos-client-get-process","title":"<code>s2gos-client get-process</code>","text":"<p>Get process details.</p> <p>Usage:</p> <pre><code>$ s2gos-client get-process [OPTIONS] PROCESS_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>PROCESS_ID</code>: Process identifier  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-c, --config PATH</code>: Client configuration file</li> <li><code>-f, --format [simple|json|yaml]</code>: Output format  [default: yaml]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"client-cli/#s2gos-client-validate-request","title":"<code>s2gos-client validate-request</code>","text":"<p>Validate a processing request.</p> <p>The processing request to be validated may be read from a file given by <code>--request</code>, or from <code>stdin</code>, or from the <code>process_id</code> argument with zero, one, or more <code>--input</code> (or <code>-i</code>) options.</p> <p>The <code>process_id</code> argument and any given <code>--input</code> options will override settings with same name found in the given request file or <code>stdin</code>, if any.</p> <p>Usage:</p> <pre><code>$ s2gos-client validate-request [OPTIONS] [PROCESS_ID]\n</code></pre> <p>Arguments:</p> <ul> <li><code>[PROCESS_ID]</code>: Process identifier</li> </ul> <p>Options:</p> <ul> <li><code>-i, --input [NAME=VALUE]...</code>: Processing request input</li> <li><code>-r, --request PATH</code>: Processing request file</li> <li><code>-f, --format [simple|json|yaml]</code>: Output format  [default: yaml]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"client-cli/#s2gos-client-execute-process","title":"<code>s2gos-client execute-process</code>","text":"<p>Execute a process in asynchronous mode.</p> <p>The processing request to be submitted may be read from a file given by <code>--request</code>, or from <code>stdin</code>, or from the <code>process_id</code> argument with zero, one, or more <code>--input</code> (or <code>-i</code>) options.</p> <p>The <code>process_id</code> argument and any given <code>--input</code> options will override settings with same name found in the given request file or <code>stdin</code>, if any.</p> <p>Usage:</p> <pre><code>$ s2gos-client execute-process [OPTIONS] [PROCESS_ID]\n</code></pre> <p>Arguments:</p> <ul> <li><code>[PROCESS_ID]</code>: Process identifier</li> </ul> <p>Options:</p> <ul> <li><code>-i, --input [NAME=VALUE]...</code>: Processing request input</li> <li><code>-r, --request PATH</code>: Processing request file</li> <li><code>-c, --config PATH</code>: Client configuration file</li> <li><code>-f, --format [simple|json|yaml]</code>: Output format  [default: yaml]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"client-cli/#s2gos-client-list-jobs","title":"<code>s2gos-client list-jobs</code>","text":"<p>List all jobs.</p> <p>Usage:</p> <pre><code>$ s2gos-client list-jobs [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-c, --config PATH</code>: Client configuration file</li> <li><code>-f, --format [simple|json|yaml]</code>: Output format  [default: yaml]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"client-cli/#s2gos-client-get-job","title":"<code>s2gos-client get-job</code>","text":"<p>Get job details.</p> <p>Usage:</p> <pre><code>$ s2gos-client get-job [OPTIONS] JOB_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>JOB_ID</code>: Job identifier  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-c, --config PATH</code>: Client configuration file</li> <li><code>-f, --format [simple|json|yaml]</code>: Output format  [default: yaml]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"client-cli/#s2gos-client-dismiss-job","title":"<code>s2gos-client dismiss-job</code>","text":"<p>Cancel a running or delete a finished job.</p> <p>Usage:</p> <pre><code>$ s2gos-client dismiss-job [OPTIONS] JOB_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>JOB_ID</code>: Job identifier  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-c, --config PATH</code>: Client configuration file</li> <li><code>-f, --format [simple|json|yaml]</code>: Output format  [default: yaml]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"client-cli/#s2gos-client-get-job-results","title":"<code>s2gos-client get-job-results</code>","text":"<p>Get job results.</p> <p>Usage:</p> <pre><code>$ s2gos-client get-job-results [OPTIONS] JOB_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>JOB_ID</code>: Job identifier  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-c, --config PATH</code>: Client configuration file</li> <li><code>-f, --format [simple|json|yaml]</code>: Output format  [default: yaml]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"contributing/","title":"Contributing to the project","text":""},{"location":"contributing/#changelog","title":"Changelog","text":"<p>You can find the complete changelog  here. </p>"},{"location":"contributing/#reporting","title":"Reporting","text":"<p>If you have suggestions, ideas, feature requests, or if you have identified a malfunction or error, then please  post an issue. </p>"},{"location":"contributing/#contributions","title":"Contributions","text":"<p>The S2GOS client project welcomes contributions of any form as long as you  respect our  code of conduct and follow our  contribution guide.</p> <p>If you'd like to submit code or documentation changes, we ask you to provide a  pull request (PR)  here.  For code and configuration changes, your PR must be linked to a  corresponding issue. </p>"},{"location":"contributing/#development","title":"Development","text":""},{"location":"contributing/#setup","title":"Setup","text":"<p>Before you start, make sure you have pixi installed.</p> <p>Checkout sources</p> <pre><code>git clone https://github.com/s2gos-dev/s2gos-controller.git\ncd ./s2gos-controller\n</code></pre> <p>Create a new Python environment and activate it:</p> <pre><code>pixi install \npixi shell\n</code></pre>"},{"location":"contributing/#running-the-s2gos-controller-tools","title":"Running the S2GOS controller tools","text":"<p>Run local test server</p> <pre><code>s2gos-server run --service=s2gos_server.services.local.testing:service\n</code></pre> <p>The dev mode is useful if you are changing server code:</p> <pre><code>s2gos-server dev --service=s2gos_server.services.local.testing:service\n</code></pre> <p>Run client API</p> <pre><code>from s2gos_client import Client\n\nclient = Client()\nclient.get_processes()\nclient.get_jobs()\n</code></pre> <p>Run client GUI (in Jupyter notebooks)</p> <pre><code>from s2gos_client.gui import Client\n\nclient = Client()\nclient.show()\nclient.show_jobs()\n</code></pre> <p>Run client CLI</p> <pre><code>$ s2gos-client --help\n</code></pre>"},{"location":"contributing/#formatting-linting","title":"Formatting &amp; Linting","text":"<pre><code>pixi run isort .\npixi run ruff format \npixi run ruff check\n</code></pre>"},{"location":"contributing/#testing-coverage","title":"Testing &amp; Coverage","text":"<pre><code>pixi run test\npixi run coverage\n</code></pre>"},{"location":"contributing/#version-syncing","title":"Version syncing","text":"<p>Before a release increase version number in root <code>pyproject.toml</code> then synchronize versions in workspaces <code>tools/pyproject.toml</code> using </p> <pre><code>pixi run sync-versions\n</code></pre>"},{"location":"contributing/#code-generation","title":"Code generation","text":"<p>Some code is generated (see respective file headers) from an OpenAPI specification in <code>tools/openapi.yaml</code>.  If this file is changed, code need to be regenerated: </p> <pre><code>pixi run generate\n</code></pre> <p>This will generate S2GOS'</p> <ul> <li>pydantic models in <code>s2gos-common/src/s2gos_common/models.py</code>  (uses datamodel-code-generator)</li> <li>client implementation in <code>s2gos-client/src/s2gos_client/client.py</code> and CLI documentation <code>docs/cli.md</code></li> <li>server routes in <code>s2gos-server/src/s2gos_server/routes.py</code> and the    service interface in <code>s2gos-server/src/s2gos_server/service.py</code></li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>The S2GOS client's documentation is built using the  mkdocs tool.</p> <p>With repository root as current working directory:</p> <pre><code>mkdocs build\nmkdocs serve\nmkdocs gh-deploy\n</code></pre> <p>After changing the CLI code, always update its documentation <code>docs/cli.md</code>  by running</p> <pre><code>pixi run gen-client\n</code></pre>"},{"location":"contributing/#license","title":"License","text":"<p>The S2GOS client is open source made available under the terms and conditions of the  Apache 2.0 license.</p>"},{"location":"todo/","title":"DTE-S2GOS client To-Dos","text":"<p>The DTE-S2GOS client is currently under development.</p>"},{"location":"todo/#next","title":"Next","text":"<p>Given here are the issues that will be addressed next.</p>"},{"location":"todo/#general-design","title":"General design","text":"<ul> <li>Clarify data i/o, formats, and protocols (also check OGC spec):</li> <li>user files --&gt; scene generator --&gt; OBJ</li> <li>OBJ --&gt; scene simulator --&gt; Zarr </li> </ul>"},{"location":"todo/#enhance-the-api-client","title":"Enhance the API Client","text":"<ul> <li>Consider generating a higher-level client from the    OGC API Processes descriptions</li> <li>Address the user-facing issues given under Code generation</li> </ul>"},{"location":"todo/#enhance-the-gui-client","title":"Enhance the GUI Client","text":"<ul> <li>Use the async API client version in the GUI Client.   <code>panel</code> widget handler that use the client can and should be async.</li> <li><code>show()</code> - show the main form where users can select a process    and submit process requests with inputs and outputs</li> <li>Actions<ul> <li>open request </li> <li>save request </li> <li>save-as request</li> <li>show success/failure</li> </ul> </li> <li>bug: process <code>gen_datacube</code>: if no bbox selected, client receives an error </li> <li>optional enhancements<ul> <li>integrate job status panel</li> <li>show request as JSON</li> </ul> </li> <li><code>show_jobs()</code> - show all jobs in a table and provide actions on job selection: </li> <li>Actions:<ul> <li>\u267b\ufe0f\ufe0f restart dismissed/failed job(s)</li> </ul> </li> <li><code>show_processes()</code> - get a nicely rendered overview of all processes </li> <li><code>show_process(process_id: str = None, job_id: str = None, editable: bool = True)</code></li> </ul>"},{"location":"todo/#implement-cli-commands","title":"Implement CLI commands","text":"<ul> <li><code>list_processes</code></li> <li><code>get_process process_id</code></li> <li><code>list_jobs</code></li> <li><code>get_job job_id</code></li> <li><code>dismiss_job job_id</code></li> <li><code>get_job_results job_id --output &lt;path&gt;</code> </li> </ul>"},{"location":"todo/#local-service","title":"Local Service","text":"<ul> <li>Path <code>/</code>:</li> <li>Also provide a HTML version, support mimetype <code>text/html</code></li> </ul>"},{"location":"todo/#airflow-service","title":"Airflow Service","text":"<ul> <li>Test the Airflow-based service that connects to the Airflow web API</li> </ul>"},{"location":"todo/#authentication","title":"Authentication","text":"<ul> <li>Implement basic authentication using OAuth2 from FastAPI,    use user_name/access_token from ClientConfig in</li> <li>client </li> <li>server</li> </ul>"},{"location":"todo/#authorisation","title":"Authorisation","text":"<ul> <li>Define roles &amp; scopes</li> <li>Implement accordingly in</li> <li>client </li> <li>server</li> </ul>"},{"location":"todo/#error-handling","title":"Error handling","text":"<ul> <li>We currently have only little error management in client.    Handle ClientException so users understand what went wrong:</li> <li>Python API</li> <li>CLI</li> <li>GUI</li> </ul>"},{"location":"todo/#code-generation","title":"Code generation","text":"<p>The output of <code>generators/gen_models</code> is not satisfying: </p> <ul> <li>Consider code generation from templates with <code>jinja2</code></li> <li>Use openapi-pydantic</li> <li>Use <code>openapi_pydantic.Schema</code>, <code>openapi_pydantic.Reference</code>, etc. in generated code</li> <li>Use <code>openapi_pydantic.OpenAPI</code> for representing <code>s2gos/common/openapi.yaml</code> in      the generators</li> </ul>"},{"location":"todo/#completed","title":"Completed","text":""},{"location":"todo/#repopackage-setup","title":"Repo/package setup","text":"<ul> <li>DONE Setup CI with <code>pixi</code></li> <li>DONE pixi run sync-versions</li> <li>DONE pixi run generate</li> <li>DONE pixi run coverage</li> <li>DONE Move all source code into <code>src</code> folder.</li> <li>DONE Use either <code>uv</code> or <code>pixi</code> for package and environment management. &lt;-- We use <code>pixi</code></li> <li>DONE: We need three main packages in the end to avoid naming clashes:</li> <li><code>s2gos_client</code> (now <code>s2gos.client</code>)</li> <li><code>s2gos_common</code> (now <code>s2gos.common.models</code>)</li> <li><code>s2gos_server</code> (now <code>s2gos.server</code>)</li> <li>DONE: Find out and decide how to setup GitHub repo(s) for this</li> <li>One repository with all three packages in <code>src</code></li> <li>One repository with three subdirectories  &lt;-- This is the one!</li> <li>Three repositories </li> <li>DONE: Align <code>ruff</code> settings with other S2GOS repos.</li> </ul>"},{"location":"todo/#general-design_1","title":"General design","text":"<ul> <li>DOING: We need two API client versions: sync and async</li> <li>DONE: Generate <code>AsyncClient</code>, next to <code>Client</code> </li> <li>DONE: Generate them using <code>httpx</code>, which      should replace currently used <code>requests</code></li> </ul>"},{"location":"todo/#enhance-the-gui-client_1","title":"Enhance the GUI Client","text":"<ul> <li><code>show()</code> - show the main form where users can select a process    and submit process requests with inputs and outputs</li> <li>DONE: select process</li> <li>DONE: render input widgets</li> <li>DONE: submit request</li> <li>Actions<ul> <li>*DONE: execute request </li> <li>*DONE: get request </li> </ul> </li> <li><code>show_jobs()</code> - show all jobs in a table and provide actions on job selection: </li> <li>DONE: use <code>Tabulator</code></li> <li>DONE Add an action row with actions applicable to the current table selection</li> <li>Actions:<ul> <li>DONE: \u2716\ufe0f cancel accepted/running job(s)</li> <li>DONE: \u274c delete successful/dismissed/failed job(s)</li> <li>DONE: \u2b07\ufe0f get job result(s)</li> </ul> </li> <li><code>show_job(job_id: str)</code> - show a dedicated job</li> </ul>"},{"location":"todo/#server-implementation","title":"Server implementation","text":""},{"location":"todo/#local-service_1","title":"Local service","text":"<ul> <li>DONE: Implement local service that can invoke any Python function</li> <li>Path <code>/</code>:</li> <li>DONE: The landing page provides links to the:<ul> <li>DONE: The APIDefinition (no fixed path),</li> <li>DONE: The Conformance statements (path <code>/conformance</code>),</li> <li>DONE: The processes metadata (path <code>/processes</code>),</li> <li>DONE: The endpoint for job monitoring (path <code>/jobs</code>).</li> </ul> </li> <li>DONE: Links should be absolute URL, hence we need <code>request: Request</code> as 1st function arg</li> </ul>"},{"location":"todo/#error-handling_1","title":"Error handling","text":"<ul> <li>TODO: Include server traceback on internal server errors with 500 status</li> </ul>"},{"location":"todo/#code-generation_1","title":"Code generation","text":"<p>Because the output of <code>generators/gen_models</code> is not satisfying: </p> <ul> <li>DONE: Many generated classes are <code>RootModels</code> which are inconvenient for users, e.g.,   <code>Input</code> requires passing values with <code>root</code> attributes.</li> <li>DONE: Basic openAPI constructs like <code>Schema</code> or <code>Reference</code> should not be   generated but reused from predefined <code>BaseModel</code>s.</li> <li>DONE: JSON generated from models is too verbose. Avoid including <code>None</code> fields and    fields that have default values.</li> <li>DONE: Generated class names like <code>Exception</code> clash with predefined Python names.</li> <li>DONE: Some generated class names are rather unintuitive, e.g.,     <code>Execute</code> instead of <code>Request</code>.</li> <li>DONE: Adjust <code>s2gos/common/openapi.yaml</code> to fix the above and/or</li> <li>DONE: Configure <code>datamodel-code-generator</code> to fix the above and/or</li> </ul>"}]}