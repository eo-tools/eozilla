# generated by gen_server.py:
#   filename:  routes.py:
#   timestamp: 2025-06-26T19:23:06.320252

import fastapi

from s2gos_common.models import (
    ProcessRequest,
)

from .app import app
from .provider import ServiceProvider


# noinspection PyPep8Naming
@app.get("/")
async def get_capabilities(fa_request: fastapi.Request, fa_response: fastapi.Response):
    return await ServiceProvider.instance().get_capabilities(
        fa_request=fa_request, fa_response=fa_response
    )


# noinspection PyPep8Naming
@app.get("/conformance")
async def get_conformance(fa_request: fastapi.Request, fa_response: fastapi.Response):
    return await ServiceProvider.instance().get_conformance(
        fa_request=fa_request, fa_response=fa_response
    )


# noinspection PyPep8Naming
@app.get("/processes")
async def get_processes(fa_request: fastapi.Request, fa_response: fastapi.Response):
    return await ServiceProvider.instance().get_processes(
        fa_request=fa_request, fa_response=fa_response
    )


# noinspection PyPep8Naming
@app.get("/processes/{processID}")
async def get_process(
    processID: str, fa_request: fastapi.Request, fa_response: fastapi.Response
):
    return await ServiceProvider.instance().get_process(
        process_id=processID, fa_request=fa_request, fa_response=fa_response
    )


# noinspection PyPep8Naming
@app.post("/processes/{processID}/execution", status_code=201)
async def execute_process(
    processID: str,
    request: ProcessRequest,
    fa_request: fastapi.Request,
    fa_response: fastapi.Response,
):
    return await ServiceProvider.instance().execute_process(
        process_id=processID,
        request=request,
        fa_request=fa_request,
        fa_response=fa_response,
    )


# noinspection PyPep8Naming
@app.get("/jobs")
async def get_jobs(fa_request: fastapi.Request, fa_response: fastapi.Response):
    return await ServiceProvider.instance().get_jobs(
        fa_request=fa_request, fa_response=fa_response
    )


# noinspection PyPep8Naming
@app.get("/jobs/{jobId}")
async def get_job(
    jobId: str, fa_request: fastapi.Request, fa_response: fastapi.Response
):
    return await ServiceProvider.instance().get_job(
        job_id=jobId, fa_request=fa_request, fa_response=fa_response
    )


# noinspection PyPep8Naming
@app.delete("/jobs/{jobId}")
async def dismiss_job(
    jobId: str, fa_request: fastapi.Request, fa_response: fastapi.Response
):
    return await ServiceProvider.instance().dismiss_job(
        job_id=jobId, fa_request=fa_request, fa_response=fa_response
    )


# noinspection PyPep8Naming
@app.get("/jobs/{jobId}/results")
async def get_job_results(
    jobId: str, fa_request: fastapi.Request, fa_response: fastapi.Response
):
    return await ServiceProvider.instance().get_job_results(
        job_id=jobId, fa_request=fa_request, fa_response=fa_response
    )
