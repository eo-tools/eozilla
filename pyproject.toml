[project]
name = "eozilla"
version = "0.0.5.dev0"
description = "S2GOS control layer comprising a server and client"
requires-python = ">=3.10"

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64", "win-64", "osx-64"]

[tool.pixi.dependencies]
# Combined sub-workspace dependencies to prevent our editable
# PyPI dependencies (our project's sub-workspaces) to install
# PyPI packages instead of using conda packages.
click = "*"
fastapi = "*"
httpx = "*"
pydantic = "*"
pyyaml = "*"
typer = "*"
uri-template = "*"
uvicorn = "*"
# IDE integration
pixi-pycharm = ">=0.0.8,<0.0.9"
# Development & build tools
pip = "*"
hatch = "*"
# Build for publication
rattler-build = ">=0.48.1,<0.49"
twine = ">=6.2.0,<7"
# Code style & linting
isort = "*"
ruff = "*"
mypy = "*"
# Unit-testing
pytest = "*"
pytest-cov = "*"
# GUI testing
ipyleaflet = "*"
ipywidgets = "*"
ipywidgets_bokeh = "*"
jupyter = "*"
notebook = "*"
panel = "*"
watchfiles = "*"
# Use cases testing
dask = "*"
xarray = "*"
zarr = "*"
# Needed in /tools
datamodel-code-generator = "*"
tomlkit = "*"  # to sync versions
# Documentation
mkdocs = "*"
mkdocs-autorefs = "*"
mkdocs-material = "*"
mkdocstrings = "*"
mkdocstrings-python = "*"
mkdocs-jupyter = "*"
nbformat = "*"
# For mermaid diagrams
pymdown-extensions = "*"
anaconda-client = ">=1.13.0,<2"

[tool.pixi.pypi-dependencies]
# For PyPI builds (maybe replace by some pixi-friendly tool)
build = ">=1.3.0,<2"
# I wished we could have "no-deps=true" here,
# or even better "[tool.pixi.workspaces]".
# See https://github.com/prefix-dev/pixi/issues/1417.
gavicore = { path = "./gavicore", editable = true }
wraptile = { path = "./wraptile", editable = true }
cuiman = { path = "./cuiman", editable = true }
procodile = { path = "./procodile", editable = true }
appligator = { path = "./appligator", editable = true }
eozilla-app-ex = { path = "./eozilla-app-ex", editable = true }
# Airflow is only available on PyPI
apache-airflow-client = "==3.0.2"
# Documentation
# For mermaid diagrams
mkdocs-mermaid2-plugin = "*"

[tool.isort]
skip = [".idea", ".github", ".pixi", "htmlcov", "site"]
profile = "black"
line_length = 88
known_first_party = ["appligator", "procodile", "gavicore", "s2gos_client", "s2gos_server", "s2gos_app_ex"]

[tool.black]
line-length = 88

[tool.ruff]
include = [
    "notebooks/**/*.py",
    "gavicore/src/**/*.py",
    "wraptile/src/**/*.py",
    "cuiman/src/**/*.py",
    "procodile/src/**/*.py",
    "appligator/src/**/*.py",
    "eozilla-app-ex/src/**/*.py",
    "tools/**/*.py",
]

[tool.ruff.lint]
ignore = ["E501", "I001"]
isort = { relative-imports-order = "closest-to-furthest" }
per-file-ignores = { "*.ipynb" = ["E402"] }
select = ["I", "F", "E"]

[tool.coverage.report]
omit = [
    "eozilla-app-ex/src/s2gos_app_ex/**/*",
    "cuiman/src/s2gos_client/gui/**/*",
    "wraptile/src/s2gos_server/services/airflow/**/*",
]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disable_error_code = ["valid-type", "import-untyped"]
exclude = [
    "eozilla-airflow",
    "eozilla-app-ex/src/test",
    "gavicore/src/test",
    "wraptile/src/test",
    "cuiman/src/test",
    "procodile/src/test",
    "appligator/src/test",
    "tools",
    "_pkg_reservations",
]
[[tool.mypy.overrides]]
module = "gavicore.models"
disable_error_code = ["valid-type"]

########################## Tasks ###############################

# pixi run test

[tool.pixi.tasks.test]
depends-on = [
    "test-gavicore",
    "test-wraptile",
    "test-cuiman",
    "test-procodile",
    "test-appligator"
]

[tool.pixi.tasks.test-gavicore]
cmd = "pytest gavicore/src/tests"

[tool.pixi.tasks.test-wraptile]
cmd = "pytest wraptile/src/tests"

[tool.pixi.tasks.test-cuiman]
cmd = "pytest cuiman/src/tests"

[tool.pixi.tasks.test-procodile]
cmd = "pytest procodile/src/tests"

[tool.pixi.tasks.test-appligator]
cmd = "pytest appligator/src/tests"

# pixi run coverage / coverage-ci

[tool.pixi.tasks.coverage]
depends-on = ["cov-modules", "cov-report-html"]

[tool.pixi.tasks.coverage-ci]
depends-on = ["cov-modules", "cov-report-xml"]

[tool.pixi.tasks.cov-modules]
depends-on = [
    "cov-gavicore",
    "cov-wraptile",
    "cov-cuiman",
    "cov-procodile",
    "cov-appligator",
]

[tool.pixi.tasks.cov-report-html]
cmd = "coverage html -d .cov-report && coverage report"

[tool.pixi.tasks.cov-report-xml]
cmd = "coverage xml -o coverage.xml && coverage report"

[tool.pixi.tasks.cov-gavicore]
cmd = "pytest --cov gavicore/src/gavicore --cov-report= --cov-append gavicore/src/tests"

[tool.pixi.tasks.cov-wraptile]
cmd = "pytest --cov wraptile/src/s2gos_server --cov-report= --cov-append wraptile/src/tests"

[tool.pixi.tasks.cov-cuiman]
cmd = "pytest --cov cuiman/src/s2gos_client --cov-report= --cov-append cuiman/src/tests"

[tool.pixi.tasks.cov-procodile]
cmd = "pytest --cov procodile/src/procodile --cov-report= --cov-append procodile/src/tests"

[tool.pixi.tasks.cov-appligator]
cmd = "pytest --cov appligator/src/appligator --cov-report= --cov-append appligator/src/tests"

# pixi run check

[tool.pixi.tasks.check]
depends-on = [
    "check-gavicore",
    "check-wraptile",
    "check-cuiman",
    "check-procodile",
    "check-appligator",
    "typecheck"
]

[tool.pixi.tasks.check-gavicore]
cmd = "ruff check gavicore/src"

[tool.pixi.tasks.check-wraptile]
cmd = "ruff check wraptile/src"

[tool.pixi.tasks.check-cuiman]
cmd = "ruff check cuiman/src"

[tool.pixi.tasks.check-procodile]
cmd = "ruff check procodile/src"

[tool.pixi.tasks.check-appligator]
cmd = "ruff check appligator/src"

[tool.pixi.tasks.typecheck]
cmd = "mypy ."

# pixi run generate

[tool.pixi.tasks.generate]
depends-on = [
    "gen-models",
    "gen-server",
    "gen-client",
    "gen-client-docs",
]

[tool.pixi.tasks.gen-models]
cmd = "python -m tools.gen_models"

[tool.pixi.tasks.gen-server]
cmd = "python -m tools.gen_server"

[tool.pixi.tasks.gen-client]
cmd = "python -m tools.gen_client"

[tool.pixi.tasks.gen-client-docs]
cmd = "python -m tools.gen_client_docs"

[tool.pixi.tasks.gen-dags]
cmd = "python -m tools.gen_dags"

# pixi run sync-versions

[tool.pixi.tasks.sync-versions]
cmd = "python -m tools.sync_versions"

# docs

[tool.pixi.tasks.docs-serve]
cmd = "mkdocs serve"

[tool.pixi.tasks.docs-build]
cmd = "mkdocs build"
